'scopeName': 'source.lumi'
'name': 'Lumi'
'fileTypes': ['lm']

'patterns': [
  {
    'begin': '~~~'
    'end': '~~~'
    'name': 'comment.block.documentation.lumi'
  },
  {
    'begin': '\\[;'
    'beginCaptures':
      '0': 'name': 'punctuation.definition.comment.begin.lumi'
    'end': ';]'
    'endCaptures':
      '0': 'name': 'punctuation.definition.comment.end.lumi'
    'name': 'comment.block.lumi'
  },
  {
    'match': '; .*$'
    'name': 'comment.line.lumi'
  },
  {
    'begin': '"'
    'beginCaptures':
      '0': 'name': 'punctuation.definition.string.begin.lumi'
    'end': '"'
    'endCaptures':
      '0': 'name': 'punctuation.definition.string.end.lumi'
    'name': 'string.quoted.double.lumi'
    'patterns': [
      {
        'match': '\\\\"|\\\\\\\\|\\\\\\n'
        'name': 'constant.character.escape.lumi'
      }
    ]
  },
  {
    'begin': '\''
    'beginCaptures':
      '0': 'name': 'punctuation.definition.constant.character.begin.lumi'
    'end': '\''
    'endCaptures':
      '0': 'name': 'punctuation.definition.constant.character.end.lumi'
    'name': 'constant.character.lumi'
    'patterns': [
      {
        'match': '\\\\\'|\\\\\\\\'
        'name': 'constant.character.escape.lumi'
      }
    ]
  },
  {
    'begin': '`'
    'beginCaptures':
      '0': 'name': 'punctuation.definition.string.begin.lumi'
    'end': '`'
    'endCaptures':
      '0': 'name': 'punctuation.definition.string.end.lumi'
    'name': 'string.quoted.single.lumi'
  },
  {
    'match': '^<(.+)>$'
    'name': '$1.lumi'
  },
  {
    'match': '^(module) ([a-z][a-z0-9-]+)$'
    'captures':
      '1': 'name': 'keyword.other.lumi'
      '2': 'name': 'entity.name.section.lumi'
  },
  {
    'match': '^ *(func)(?: (inst|dynamic|static))? ([a-z][a-z0-9-]+)(\\()'
    'captures':
      '1': 'name': 'keyword.other.lumi'
      '2': 'name': 'keyword.other.lumi'
      '3': 'name': 'entity.name.function.lumi'
      '4': 'name': 'keyword.operator.lumi'
  },
  {
    'match': '^(const|struct|class|interface|main|enum|native(?: func| type)?|test|mock|alias)\\s'
    'captures': '1': 'name': 'keyword.other.lumi'
  },
  {
    'match': '^ +(new|return|raise|assert|assert-error|try|catch)\\s'
    'captures': '1': 'name': 'keyword.other.lumi'
  },
  {
    'match': '^ +(if|else|else-if|do|while|break|continue|for|in|switch|case|default|fallthrough)\\s'
    'captures': '1': 'name': 'keyword.control.lumi'
  },
  {
    'match': '\\b(\\+|-|\\*|div|mod|=|!=|>|<|>=|<=|is|is-not|not|or|and|:=|\\+=|-=) '
    'captures': '1': 'name': 'keyword.operator.lumi'
  },
  {
    'match': '\\b(copy|user|owner|var|managed|weak|shared) '
    'captures': '1': 'name': 'storage.modifier.lumi'
  },
  {
    'match': '\\b([a-z][a-z-]+)(\\()'
    'captures':
      '1': 'name': 'entity.name.function.lumi'
      '2': 'name': 'keyword.operator.lumi'
  },
  {
    'match': '\\b(self|base)([. \n])'
    'captures':
      '1': 'name': 'variable.language.lumi'
      '2': 'name': 'keyword.operator.lumi'
  },
  {
    'match': '\\b_|true|false\\b'
    'name': 'constant.language.lumi'
  },
  {
    'match': '\\b([A-Z][a-z][a-zA-Z0-9]+)\\b'
    'name': 'entity.name.type.lumi'
  },
  {
    'match': '\\b([A-Z][A-Z0-9\\-]+)\\b'
    'name': 'constant.other.lumi'
  },
  {
    'match': '[(),{}\\[\\]:.?]|->'
    'name': 'keyword.operator.lumi'
  },
  {
    'match': '\\b([a-z](?:[a-z0-9-]+)?)\\b'
    'name': 'variable.parameter.lumi'
  },
  {
    'match': '-?(?:0x[0-9a-fA-F]+|0b[0-1]+|[0-9]+)'
    'name': 'constant.numeric.lumi'
  }
]
