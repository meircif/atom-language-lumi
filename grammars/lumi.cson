'scopeName': 'source.lumi'
'name': 'Lumi'
'fileTypes': ['lm']

'patterns': [
  {
    'begin': '~~~'
    'end': '~~~'
    'name': 'comment.block.documentation.lumi'
  },
  {
    'begin': '\\[;'
    'beginCaptures':
      '0': 'name': 'punctuation.definition.comment.begin.lumi'
    'end': ';]'
    'endCaptures':
      '0': 'name': 'punctuation.definition.comment.end.lumi'
    'name': 'comment.block.lumi'
  },
  {
    'match': '; .*$'
    'name': 'comment.line.lumi'
  },
  {
    'begin': '"'
    'beginCaptures':
      '0': 'name': 'punctuation.definition.string.begin.lumi'
    'end': '"'
    'endCaptures':
      '0': 'name': 'punctuation.definition.string.end.lumi'
    'name': 'string.quoted.double.lumi'
    'patterns': [
      {
        'match': '\\\\.|\\\\\\n'
        'name': 'constant.character.escape.lumi'
      }
    ]
  },
  {
    'begin': '\''
    'beginCaptures':
      '0': 'name': 'punctuation.definition.constant.character.begin.lumi'
    'end': '\''
    'endCaptures':
      '0': 'name': 'punctuation.definition.constant.character.end.lumi'
    'name': 'constant.character.lumi'
    'patterns': [
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.lumi'
      }
    ]
  },
  {
    'begin': '`'
    'beginCaptures':
      '0': 'name': 'punctuation.definition.string.begin.lumi'
    'end': '`'
    'endCaptures':
      '0': 'name': 'punctuation.definition.string.end.lumi'
    'name': 'string.quoted.single.lumi'
  },
  {
    'match': '^<(.+)>$'
    'name': '$1.lumi'
  },
  {
    'match': '^(module) ([a-z][a-z0-9-]+)$'
    'captures':
      '1': 'name': 'keyword.other.lumi'
      '2': 'name': 'entity.name.section.lumi'
  },
  {
    'match': '^(const|struct|class|interface|main|enum|native(?: include| var| const| func| type| code)|test|mock|alias)\\s'
    'captures': '1': 'name': 'keyword.other.lumi'
  },
  {
    'match': '^ *(var|owner|user|strong|weak|s-var|shared|new) ((?:[a-z]+\\.)?[A-Z][a-z][a-zA-Z0-9]*\\??(?:{.*})?) ([a-z][a-z0-9-]*)([!(\\n])'
    'captures':
      '1': 'name': 'keyword.other.lumi'
      '2': 'patterns': [{'include': '$self'}]
      '3': 'name': 'variable.parameter.lumi'
      '4': 'name': 'keyword.operator.lumi'
  },
  {
    'match': '^ +(for) (.+) (in) '
    'captures':
      '1': 'name': 'keyword.control.lumi'
      '2': 'patterns': [{'include': '$self'}]
      '3': 'name': 'keyword.control.lumi'
  },
  {
    'match': '^ *(func)(?: (inst|dynamic|static))?(?: ([a-z\\-]+)(\\??))?\\s'
    'captures':
      '1': 'name': 'keyword.other.lumi'
      '2': 'name': 'keyword.other.lumi'
      '3': 'name': 'storage.modifier.lumi'
      '4': 'name': 'keyword.operator.lumi'
  },
  {
    'match': '^ +(new|return|raise!?|assert!?|assert-error!?|try|catch|native)\\s'
    'captures': '1': 'name': 'keyword.other.lumi'
  },
  {
    'match': '^ +(block|if|else|else-if|if-ok|if-error|else-if-ok|else-if-error|loop!?|loop-infinite|repeat|while|break|continue|switch|case|default|fallthrough)\\s'
    'captures': '1': 'name': 'keyword.control.lumi'
  },
  {
    'match': ' (\\+|-|\\*|div|mod|=|<>|>|<|>=|<=|is|is-not|not|or|and|:=|\\+=|-=|\\*=|:=:)[ \\n]'
    'captures': '1': 'name': 'keyword.operator.lumi'
  },
  {
    'match': '(-|not)[ \\n]'
    'captures': '1': 'name': 'keyword.operator.lumi'
  },
  {
    'match': '\\b(var|copy|owner|user|reset|strong|weak|s-var|shared) '
    'captures': '1': 'name': 'storage.modifier.lumi'
  },
  {
    'match': '\\b(self|base|sys)([ .,()?!\\n])'
    'captures':
      '1': 'name': 'variable.language.lumi'
      '2': 'name': 'keyword.operator.lumi'
  },
  {
    'match': '\\b([a-z][a-z0-9-]*)(!?\\()'
    'captures':
      '1': 'name': 'entity.name.function.lumi'
      '2': 'name': 'keyword.operator.lumi'
  },
  {
    'match': '\\b_|true|false\\b'
    'name': 'constant.language.lumi'
  },
  {
    'match': '\\b([A-Z][a-z][a-zA-Z0-9]*)\\b'
    'name': 'entity.name.type.lumi'
  },
  {
    'match': '\\b([A-Z][A-Z0-9\\-]*)\\b'
    'name': 'constant.other.lumi'
  },
  {
    'match': '[(),{}\\[\\]:.?!]|->'
    'name': 'keyword.operator.lumi'
  },
  {
    'match': '\\b([a-z][a-z0-9-]*)\\b'
    'name': 'variable.parameter.lumi'
  },
  {
    'match': '-?(?:0x[0-9a-fA-F]+|0b[0-1]+|[0-9]+)'
    'name': 'constant.numeric.lumi'
  }
]
